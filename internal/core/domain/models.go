package domain

import (
	"fmt"
	"time"
)

// PriceUpdate –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—ã—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç –±–∏—Ä–∂–∏
type PriceUpdate struct {
	Exchange  string    `json:"exchange"`
	Symbol    string    `json:"symbol"`
	Price     float64   `json:"price"`
	Timestamp time.Time `json:"timestamp"`
}

// MarketData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç exchange simulators (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
type MarketData struct {
	Symbol    string  `json:"symbol"`
	Price     float64 `json:"price"`
	Timestamp int64   `json:"timestamp"`
	Exchange  string  `json:"exchange"`
}

// AggregatedData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–ª—è PostgreSQL)
type AggregatedData struct {
	PairName     string    `json:"pair_name" db:"pair_name"`
	Exchange     string    `json:"exchange" db:"exchange"`
	Timestamp    time.Time `json:"timestamp" db:"timestamp"`
	AveragePrice float64   `json:"average_price" db:"average_price"`
	MinPrice     float64   `json:"min_price" db:"min_price"`
	MaxPrice     float64   `json:"max_price" db:"max_price"`
}

// PriceResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç API –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
type PriceResponse struct {
	Symbol    string    `json:"symbol"`
	Exchange  string    `json:"exchange,omitempty"`
	Price     float64   `json:"price"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatus –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
type HealthStatus struct {
	Status       string                 `json:"status"`
	Timestamp    time.Time              `json:"timestamp"`
	Version      string                 `json:"version"`
	Mode         string                 `json:"mode"`
	Dependencies map[string]interface{} `json:"dependencies"`
}

// ExchangeInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–µ
type ExchangeInfo struct {
	Name   string `json:"name"`
	Host   string `json:"host"`
	Port   int    `json:"port"`
	Status string `json:"status"` // "connected", "disconnected", "reconnecting"
}

// PriceStatistics –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º
type PriceStatistics struct {
	Symbol        string    `json:"symbol"`
	Exchange      string    `json:"exchange,omitempty"`
	Period        string    `json:"period"`
	Count         int       `json:"count"`
	AveragePrice  float64   `json:"average_price"`
	MinPrice      float64   `json:"min_price"`
	MaxPrice      float64   `json:"max_price"`
	FirstPrice    float64   `json:"first_price"`
	LastPrice     float64   `json:"last_price"`
	StartTime     time.Time `json:"start_time"`
	EndTime       time.Time `json:"end_time"`
	Volatility    float64   `json:"volatility,omitempty"`     // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
	PriceChange   float64   `json:"price_change,omitempty"`   // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è - –ø–µ—Ä–≤–∞—è)
	PercentChange float64   `json:"percent_change,omitempty"` // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
}

// Methods for PriceUpdate

// GetKey –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∏—Ä–∂–∞:—Å–∏–º–≤–æ–ª
func (p PriceUpdate) GetKey() string {
	return fmt.Sprintf("%s:%s", p.Exchange, p.Symbol)
}

// ToMarketData –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PriceUpdate –≤ MarketData
func (p PriceUpdate) ToMarketData() MarketData {
	return MarketData{
		Symbol:    p.Symbol,
		Price:     p.Price,
		Timestamp: p.Timestamp.Unix(),
		Exchange:  p.Exchange,
	}
}

// ToPriceResponse –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PriceUpdate –≤ PriceResponse
func (p PriceUpdate) ToPriceResponse() PriceResponse {
	return PriceResponse{
		Symbol:    p.Symbol,
		Exchange:  p.Exchange,
		Price:     p.Price,
		Timestamp: p.Timestamp,
	}
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å PriceUpdate
func (p PriceUpdate) Validate() error {
	if p.Exchange == "" {
		return ErrEmptyExchange
	}
	if p.Symbol == "" {
		return ErrEmptySymbol
	}
	if !IsValidSymbol(p.Symbol) {
		return fmt.Errorf("%w: %s", ErrInvalidSymbol, p.Symbol)
	}
	if p.Price <= 0 {
		return fmt.Errorf("%w: got %f", ErrInvalidPrice, p.Price)
	}
	if p.Timestamp.IsZero() {
		return ErrEmptyTimestamp
	}
	return nil
}

// Methods for MarketData

// ToPriceUpdate –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MarketData –≤ PriceUpdate
func (m MarketData) ToPriceUpdate() PriceUpdate {
	return PriceUpdate{
		Exchange:  m.Exchange,
		Symbol:    m.Symbol,
		Price:     m.Price,
		Timestamp: time.Unix(m.Timestamp, 0),
	}
}

// Methods for AggregatedData

// GetKey –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∏—Ä–∂–∞:—Å–∏–º–≤–æ–ª
func (a AggregatedData) GetKey() string {
	return fmt.Sprintf("%s:%s", a.Exchange, a.PairName)
}

// ToPriceResponse –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç AggregatedData –≤ PriceResponse (–∏—Å–ø–æ–ª—å–∑—É—è —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É)
func (a AggregatedData) ToPriceResponse() PriceResponse {
	return PriceResponse{
		Symbol:    a.PairName,
		Exchange:  a.Exchange,
		Price:     a.AveragePrice,
		Timestamp: a.Timestamp,
	}
}

// ToPriceStatistics –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç AggregatedData –≤ PriceStatistics
func (a AggregatedData) ToPriceStatistics(period string, count int) PriceStatistics {
	return PriceStatistics{
		Symbol:       a.PairName,
		Exchange:     a.Exchange,
		Period:       period,
		Count:        count,
		AveragePrice: a.AveragePrice,
		MinPrice:     a.MinPrice,
		MaxPrice:     a.MaxPrice,
		FirstPrice:   a.MinPrice,                    // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
		LastPrice:    a.MaxPrice,                    // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
		StartTime:    a.Timestamp.Add(-time.Minute), // –ü–µ—Ä–∏–æ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
		EndTime:      a.Timestamp,
	}
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å AggregatedData
func (a AggregatedData) Validate() error {
	if a.Exchange == "" {
		return ErrEmptyExchange
	}
	if a.PairName == "" {
		return ErrEmptySymbol
	}
	if !IsValidSymbol(a.PairName) {
		return fmt.Errorf("%w: %s", ErrInvalidSymbol, a.PairName)
	}
	if a.AveragePrice <= 0 || a.MinPrice <= 0 || a.MaxPrice <= 0 {
		return ErrInvalidPrice
	}
	if a.MinPrice > a.AveragePrice || a.AveragePrice > a.MaxPrice {
		return ErrInvalidPriceRange
	}
	if a.Timestamp.IsZero() {
		return ErrEmptyTimestamp
	}
	return nil
}

// Methods for PriceStatistics

// GetPriceChange –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
func (p PriceStatistics) GetPriceChange() float64 {
	return p.LastPrice - p.FirstPrice
}

// GetPercentChange –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
func (p PriceStatistics) GetPercentChange() float64 {
	if p.FirstPrice == 0 {
		return 0
	}
	return ((p.LastPrice - p.FirstPrice) / p.FirstPrice) * 100
}

// IsPositiveChange –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã—Ä–æ—Å–ª–∞ –ª–∏ —Ü–µ–Ω–∞
func (p PriceStatistics) IsPositiveChange() bool {
	return p.LastPrice > p.FirstPrice
}

// GetDuration –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
func (p PriceStatistics) GetDuration() time.Duration {
	return p.EndTime.Sub(p.StartTime)
}

// GetAveragePriceRange –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–π
func (p PriceStatistics) GetAveragePriceRange() (float64, float64) {
	avgDeviationUp := p.MaxPrice - p.AveragePrice
	avgDeviationDown := p.AveragePrice - p.MinPrice
	return avgDeviationDown, avgDeviationUp
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (p PriceStatistics) Validate() error {
	if p.Symbol == "" {
		return ErrEmptySymbol
	}
	if p.Count <= 0 {
		return fmt.Errorf("count must be positive, got: %d", p.Count)
	}
	if p.MinPrice <= 0 || p.MaxPrice <= 0 || p.AveragePrice <= 0 {
		return ErrInvalidPrice
	}
	if p.MinPrice > p.AveragePrice || p.AveragePrice > p.MaxPrice {
		return ErrInvalidPriceRange
	}
	if p.StartTime.After(p.EndTime) {
		return fmt.Errorf("start time cannot be after end time")
	}
	return nil
}

// ToSummary –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (p PriceStatistics) ToSummary() string {
	change := p.GetPercentChange()
	direction := "üìà"
	if change < 0 {
		direction = "üìâ"
	} else if change == 0 {
		direction = "‚û°Ô∏è"
	}

	return fmt.Sprintf("%s %s: %d updates, %.2f avg, %.2f%% change %s",
		p.Exchange, p.Symbol, p.Count, p.AveragePrice, change, direction)
}

// IsOlderThan –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–∞—Ä—à–µ –ª–∏ —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
func (p PriceResponse) IsOlderThan(duration time.Duration) bool {
	return time.Since(p.Timestamp) > duration
}

// Methods for HealthStatus

// IsHealthy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
func (h HealthStatus) IsHealthy() bool {
	return h.Status == "ok"
}

// AddDependency –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
func (h *HealthStatus) AddDependency(name string, status string, details map[string]interface{}) {
	if h.Dependencies == nil {
		h.Dependencies = make(map[string]interface{})
	}

	dep := map[string]interface{}{
		"status": status,
	}

	for k, v := range details {
		dep[k] = v
	}

	h.Dependencies[name] = dep
}

// Methods for ExchangeInfo

// IsConnected –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –±–∏—Ä–∂–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
func (e ExchangeInfo) IsConnected() bool {
	return e.Status == "connected"
}

// GetAddress –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –±–∏—Ä–∂–∏
func (e ExchangeInfo) GetAddress() string {
	if e.Port == 0 {
		return e.Host
	}
	return fmt.Sprintf("%s:%d", e.Host, e.Port)
}
